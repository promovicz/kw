{{lowercase title}}
{{primitive|!I|in=k3(transposed), k4-k9}}
[[File:Счётчик мех.jpg|256px|right|thumb|A real-life odometer.]]

The '''odometer''' for an int list <tt>x</tt> generates the Cartesian product of <code>!x[0]</code>, <code>!x[1]</code>, .., <code>!x[-1+#x]</code> as the columns of a <code>#x</code> by <code>*/x</code> matrix.
  !2 4 3
 (0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1
  0 0 0 1 1 1 2 2 2 3 3 3 0 0 0 1 1 1 2 2 2 3 3 3
  0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2)
Odometer generates all paths to elements in a matrix, with each column a path and each row a dimension. It can be used for indexing:<syntaxhighlight>
 : m:(`a`b`c;`d`e`f;`g`h`i)
(`a`b`c
 `d`e`f
 `g`h`i)
 : p: !2 2  / top-left corner
(0 0 1 1
 0 1 0 1)
 (m') . p
`a`b`d`e
</syntaxhighlight>Some K implementations(K2/K3) do not have this primitive. It can be defined as follows:

'''K3'''<ref>https://chat.stackexchange.com/transcript/message/58561631#58561631</ref>

provides a transposed version.<syntaxhighlight>
{x _vs!*/x}
</syntaxhighlight>'''K6<ref>https://chat.stackexchange.com/transcript/message/58561596#58561596</ref>'''<syntaxhighlight>
{+x\'!*/x}
</syntaxhighlight>

== References ==
